---
apiVersion: 'apps/v1'
kind: StatefulSet
metadata:
  name: neo4j-statefulset
  namespace: cartography
  labels:
    app: cartography
    component: neo4j
spec:
  serviceName: neo4j-statefulset
  replicas: 1
  selector:
    matchLabels:
      app: cartography
      component: neo4j
  template:
    metadata:
      labels:
        app: cartography
        component: neo4j
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/role: 'vault-agent'
        vault.hashicorp.com/agent-inject-secret-neo4j-password: 'secret/data/cartography/neo4j-password'
        vault.hashicorp.com/agent-inject-template-neo4j-password: |
          {{ with secret "secret/data/cartography/neo4j-password" -}}
            export NEO4J_SECRETS_PASSWORD="{{ .Data.data.NEO4J_SECRETS_PASSWORD }}"
          {{- end }}
    spec:
      serviceAccountName: vault-agent
      securityContext:
        runAsUser: 27100
        runAsGroup: 27100
      containers:
        - name: neo4j-statefulset
          image: //third_party/docker:neo4j
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
              value: 'true'
            - name: NUMBER_OF_CORES
              value: '1'
            - name: AUTH_ENABLED
              value: 'true'
            # TODO
            - name: NEO_HOSTNAME
              value: 'neo4j-bolt-service.cartography.svc.cluster.local'
          command:
            - '/bin/bash'
            - '-c'
            - |
              # Populate env vars from secrets --> NEO4J_SECRETS_PASSWORD
              $(cat /vault/secrets/neo4j-password)

              mkdir -p /data/ssl/client_policy/trusted
              mkdir -p /data/ssl/client_policy/revoked
              mkdir -p /data/certs/

              # Setup Neo4j config
              #   - Prefix with NEO4J_.
              #   - Underscores must be written twice: _ is written as __.
              #   - Periods are converted to underscores: . is written as _.
              #
              # Global Configs
              #
              export NEO4J_AUTH="neo4j/${NEO4J_SECRETS_PASSWORD}"
              export NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
              export NEO4J_dbms_connectors_default__advertised__address=${NEO_HOSTNAME}


              #
              # Setup SSL - Folders
              #
              # export NEO4J_dbms_ssl_policy_client__policy_base__directory=/data/ssl/client_policy
              # export NEO4J_dbms_ssl_policy_client__policy_trusted__dir=/data/ssl/client_policy/trusted
              # export NEO4J_dbms_ssl_policy_client__policy_revoked__dir=/data/ssl/client_policy/revoked
              #
              # Setup SSL - Certificates
              #
              # export NEO4J_dbms_ssl_policy_client__policy_private__key=/data/certs/server_key.pem
              # export NEO4J_dbms_ssl_policy_client__policy_public__certificate=/data/certs/server_chain.pem
              # cp /data/certs/server_chain.pem /data/ssl/client_policy/trusted/
              #
              # Setup SSL - Enable policy
              #
              # export NEO4J_https_ssl__policy=client_policy
              # export NEO4J_bolt_ssl__policy=client_policy
              # export NEO4J_dbms_ssl_policy_client__policy_client__auth=NONE
              # export NEO4J_dbms_connector_bolt_tls__level=OPTIONAL
              #
              # Run Neo4j
              #
              exec /docker-entrypoint.sh "neo4j"
          ports:
            - name: discovery
              containerPort: 5000
            - name: raft
              containerPort: 7000
            - name: tx
              containerPort: 6000
            - name: http
              containerPort: 7474
            - name: https
              containerPort: 7473
            - name: bolt
              containerPort: 7687
          resources:
            requests:
              memory: 512Mi
              cpu: 500m
            limits:
              memory: 1Gi
              cpu: 800m
          volumeMounts:
            - name: datadir
              mountPath: '/data'
            # - name: plugins
            #   mountPath: /plugins
            # - name: neo4j-certs-volume
            #   mountPath: /etc/certs/
            #   readOnly: true
            # - name: folder-ssl
            #   mountPath: /data/ssl/client_policy
            # - name: folder-ssl-trusted
            #   mountPath: /data/ssl/client_policy/trusted
            # - name: folder-ssl-revoked
            #   mountPath: /data/ssl/client_policy/revoked
      volumes:
        # - name: plugins
        #   emptyDir: {}
        # - name: neo4j-certs-volume
        #   secret:
        #     secretName: neo4j-bolt-tls
        #     items:
        #       - key: tls.key
        #         path: server_key.pem
        #       - key: tls.crt
        #         path: server_chain.pem
        # - name: folder-ssl
        #   emptyDir: {}
        # - name: folder-ssl-trusted
        #   emptyDir: {}
        # - name: folder-ssl-revoked
        #   emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: neo4j-storage
        resources:
          requests:
            storage: '1Gi'
